# Makefile for kconfig
#
# Do not use kbuild to build kconfig because they are separated tools in
# this project. However, we still want to use Makefile in kconfig itself.
#
# This is a wrapper which provide minimal requirements for building conf
# and mconf.
#

PHONY := _all
_all:

ifneq ($(sub_make_done),1)

MAKEFLAGS += -rR

unexport LC_ALL
LC_COLLATE=C
LC_NUMERIC=C
export LC_COLLATE LC_NUMERIC

unexport GREP_OPTIONS

# Do we want to change the working directory?
ifeq ("$(origin O)", "command line")
  KBUILD_OUTPUT := $(O)
endif

ifneq ($(KBUILD_OUTPUT),)
# Make's built-in functions such as $(abspath ...), $(realpath ...) cannot
# expand a shell special character '~'. We use a somewhat tedious way here.
abs_objtree := $(shell mkdir -p $(KBUILD_OUTPUT) && cd $(KBUILD_OUTPUT) && pwd)
$(if $(abs_objtree),, \
     $(error failed to create output directory "$(KBUILD_OUTPUT)"))

# $(realpath ...) resolves symlinks
abs_objtree := $(realpath $(abs_objtree))
else
abs_objtree := $(CURDIR)
endif # ifneq ($(KBUILD_OUTPUT),)

ifeq ($(abs_objtree),$(CURDIR))
$(error Building in srctree is not supported)
else
need-sub-make := 1
endif

abs_srctree := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

ifneq ($(words $(subst :, ,$(abs_srctree))), 1)
$(error source directory cannot contain spaces or colons)
endif

ifneq ($(abs_srctree),$(abs_objtree))
# Look for make include files relative to root of kernel src
#
# This does not become effective immediately because MAKEFLAGS is re-parsed
# once after the Makefile is read. We need to invoke sub-make.
MAKEFLAGS += --include-dir=$(abs_srctree)
need-sub-make := 1
endif

ifneq ($(filter 3.%,$(MAKE_VERSION)),)
# 'MAKEFLAGS += -rR' does not immediately become effective for GNU Make 3.x
# We need to invoke sub-make to avoid implicit rules in the top Makefile.
need-sub-make := 1
# Cancel implicit rules for this Makefile.
$(lastword $(MAKEFILE_LIST)): ;
endif

export abs_srctree abs_objtree
export sub_make_done := 1

ifeq ($(need-sub-make),1)

PHONY += $(MAKECMDGOALS) sub-make

$(filter-out _all sub-make $(lastword $(MAKEFILE_LIST)), $(MAKECMDGOALS)) _all: sub-make
	@:

# Invoke a second make in the output directory, passing relevant variables
sub-make:
	$(Q)$(MAKE) -C $(abs_objtree) -f $(abs_srctree)/Makefile.kconfig $(MAKECMDGOALS)

endif # need-sub-make
endif # sub_make_done

# We process the rest of the Makefile if this is the final invocation of make
ifeq ($(need-sub-make),)

ifeq ($(abs_srctree),$(abs_objtree))
        # building in the source tree
        srctree := .
	building_out_of_srctree :=
else
        ifeq ($(abs_srctree)/,$(dir $(abs_objtree)))
                # building in a subdirectory of the source tree
                srctree := ..
        else
                srctree := $(abs_srctree)
        endif
	building_out_of_srctree := 1
endif


objtree		:= .
VPATH		:= $(srctree)

obj := kconfig
src := $(obj)

# target with $(obj)/ and its suffix stripped
target-stem = $(basename $(patsubst $(obj)/%,%,$@))

# Useful for describing the dependency of composite objects
# Usage:
#   $(call multi_depend, multi_used_targets, suffix_to_remove, suffix_to_add)
define multi_depend
$(foreach m, $(notdir $1), \
	$(eval $(obj)/$m: \
	$(addprefix $(obj)/, $(foreach s, $3, $($(m:%$(strip $2)=%$(s)))))))
endef

define filechk
	mkdir -p $(dir $@);			\
	{ $(filechk_$(1)); } > $@;
endef

HOSTCC		:= gcc
LEX		:= flex
YACC		:= bison

KBUILD_HOSTCFLAGS	:= -Wall -Wmissing-prototypes -Wstrict-prototypes -O2

include kconfig/Makefile

$(info abs_srctree=$(abs_srctree))
$(info abs_objtree=$(abs_objtree))
$(info srctree=$(srctree))
$(info objtree=$(objtree))
# LEX
# ---------------------------------------------------------------------------
$(obj)/%.lex.c: $(src)/%.l FORCE
	$(LEX) -o$@ -L $<

# YACC
# ---------------------------------------------------------------------------
$(obj)/%.tab.c $(obj)/%.tab.h: $(src)/%.y FORCE
	$(YACC) -o $(basename $@).c --defines=$(basename $@).h -t -l $<

__hostprogs := $(sort $(hostprogs))

# C code
# Executables compiled from a single .c file
host-csingle	:= $(foreach m,$(__hostprogs), \
			$(if $($(m)-objs)$($(m)-cxxobjs),,$(m)))

# C executables linked based on several .o files
host-cmulti	:= $(foreach m,$(__hostprogs),\
		   $(if $($(m)-cxxobjs),,$(if $($(m)-objs),$(m))))

# Object (.o) files compiled from .c files
host-cobjs	:= $(sort $(foreach m,$(__hostprogs),$($(m)-objs)))

host-csingle	:= $(addprefix $(obj)/,$(host-csingle))
host-cmulti	:= $(addprefix $(obj)/,$(host-cmulti))
host-cobjs	:= $(addprefix $(obj)/,$(host-cobjs))

targets += $(host-csingle)  $(host-cmulti) $(host-cobjs)

ifdef building_out_of_srctree
# Create directories for object files if they do not exist
obj-dirs := $(sort $(obj) $(patsubst %/,%, $(dir $(targets))))
# If targets exist, their directories apparently exist. Skip mkdir.
existing-dirs := $(sort $(patsubst %/,%, $(dir $(existing-targets))))
obj-dirs := $(strip $(filter-out $(existing-dirs), $(obj-dirs)))
ifneq ($(obj-dirs),)
$(shell mkdir -p $(obj-dirs))
endif
endif

hostc_flags += -I $(objtree)/$(obj) -I $(srctree)/$(src)

$(host-cmulti): FORCE
	$(HOSTCC) $(KBUILD_HOSTLDFLAGS) -o $@ \
		$(addprefix $(obj)/, $($(target-stem)-objs)) \
		$(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))

$(call multi_depend, $(host-cmulti), , -objs)

$(host-cobjs): $(obj)/%.o: $(src)/%.c FORCE
	$(HOSTCC) $(KBUILD_HOSTCFLAGS) $(hostc_flags) -c -o $@ $<

_all: $(obj)/mconf $(obj)/conf

endif # need-sub-make

PHONY += FORCE
FORCE:

# Declare the contents of the PHONY variable as phony.  We keep that
# information in a variable so we can use it in if_changed and friends.
.PHONY: $(PHONY)
